<style>
  .flex-wrap {display:flex;flex-wrap:wrap;}
  
  #offerte-form .col {flex:0 0 50%;padding-right:20px;padding-left:20px;max-width:50%}
  #offerte-form .form-group {display:flex;flex-direction:column;padding-bottom:10px;}
  #offerte-form .form-group input, textarea, select {padding: 6px 12px;font-size: 16px;font-weight: 400;line-height: 1.5;color: #212529;background-color: #fff;background-clip: padding-box;border: 1px solid #ced4da;appearance: none;border-radius: 4px;transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;}
  #offerte-form .form-group input:focus, textarea:focus, select:focus{color:#212529;background-color:#fff;border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgb(13 110 253 / 25%)}
  #offerte-form .button-group {flex: 0 0 100%;display:flex;justify-content:flex-end;}
  #offerte-form .submit-form{text-decoration:none;display:inline-block;outline:0;cursor:pointer;text-align:center;border:1px solid #babfc3;padding:11px 24px;min-height:44px;min-width:44px;color:#202223;background:#fff;border-radius:4px;font-weight:500;font-size:14px;box-shadow:rgba(0,0,0,.05) 0 1px 0 0}
  #offerte-form .submit-form:hover{background:#f6f6f7;outline:transparent solid 1px}
  #offerte-form .title-box.form {padding-left:20px;}
  #offerte-form .title-box {font-size:28px;}

  #offerte-form .quote-products {padding-top:20px;}
  #offerte-form .quote-products .HTMLProducts .product {display:flex;gap:10px;padding-bottom:10px;}
  #offerte-form .quote-products .HTMLProducts .product .product-title {max-width:45rem;display:flex;flex-direction:column}
  #offerte-form .quote-products .HTMLProducts .product .product-image {border:2px solid #e4e4e4;border-radius:10px;}
</style>


<div id="offerte-form" class="offerte-form flex-wrap">
    <form id="quote-form" class="quote-form col flex-wrap" method="POST" action="" enctype="multipart/form-data">
      <div class="title-box form">
        <strong>Gegevens</strong>
      </div>
      <div class="flex-wrap">
        <div class="form-group col">
          <label for="email">E-mail</label>
          <input id="email" name="email" class="email" type="email" required placeholder="email"/>
        </div>
        <div class="form-group col">
          <label for="firstname">Voornaam</label>
          <input type="text" id="firstname" name="firstname" class="firstname" required placeholder="Voornaam"/>
        </div>
        <div class="form-group col">
          <label for="lastname">Lastname</label>
          <input id="lastname" name="lastname" class="lastname" required placeholder="Lastname"/>
        </div>
        <div class="form-group col">
          <label for="phone">Phone</label>
          <input type="text" id="phone" name="phone" class="phone" required placeholder="Phone"/>
        </div>
        <div class="form-group col">
          <label for="comment">Opmerking</label>
          <textarea id="comment" name="comment" class="comment" col="3" placeholder="Opmerking"></textarea>
        </div>
        <div class="button-group">
          <a href="javascript:;" class="submit-form">Offerte aanvargen</a>
        </div>
      </div>
    </form>
   <div class="quote-product-box col">
           <div class="title-box">
        <strong>Producten</strong>
      </div>
     <div class="quote-products"></div>
   </div>
</div>
<script>
  // Function to get data from localStorage by a given storageName
  function getStorage(storageName) {
    let data = '';
    try {
      data = JSON.parse(localStorage.getItem(storageName));
    } catch (exception) {
      data = "Exception has occurred with error message " + exception;
    }
    return data;
  }
  
  // Event listener for when the DOM content is fully loaded
  document.addEventListener("DOMContentLoaded", function () {
    // Get products from localStorage
    var products = getStorage('ismProducts');
    var HtmlProducts = '<div class="HTMLProducts">';
  
    // Loop through each product and generate HTML
    for (const [key, value] of Object.entries(products)) {
      var productHtml = generateProductHtml(value);
      HtmlProducts += productHtml;
    }
  
    HtmlProducts += '</div>';
    // Display the generated HTML in the specified element
    document.querySelector('.quote-products').innerHTML = HtmlProducts;
  
    // Event listener for the form submit button
    var clickForm = document.querySelector('.submit-form');
    clickForm.addEventListener("click", function () {
      // Prepare data for POST request
      var postData = {
        products: getStorage('ismProducts'),
        customer: {},
      };
  
      // Get form items (inputs, selects, textareas)
      const formItems = getFormItems();
  
      // Populate customer data from form items
      for (var i = 0; i < formItems.length; i++) {
        postData.customer[formItems[i].name] = formItems[i].value;
      }
  
      // Send the data to the server
      sendFormData(postData);
    });
  });
  
  // Function to generate HTML for a product
  function generateProductHtml(product) {
    return `
      <div class="product">
        <div class="product-image">
          <img src="${product.image}" width="100" height="100"/>
        </div>
        <div class="product-title">
          <span>${product.title}</span>
          <strong>${product.variant_title}</strong>
        </div>
        <div class="product-quantity">${product.quantity}</div>
        <div class="product-price">
          <span>&euro;${product.price}</span>
        </div>
      </div>`;
  }
  
  // Function to get form items (inputs, selects, textareas)
  function getFormItems() {
    let inputs = document.querySelectorAll("#offerte-form input");
    let selects = document.querySelectorAll("#offerte-form select");
    let textareas = document.querySelectorAll("#offerte-form textarea");
  
    return [...inputs, ...selects, ...textareas];
  }
  
  // Function to send form data to the server
  function sendFormData(data) {
    const fetchPromise = fetch('//api.instijlmedia.nl/api/shops/shopify/index.php', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  
    fetchPromise.then((response) => {
      console.log(response);
      return response.json();
    }).then(function (response) {
      console.log(response);
    });
  }
    
</script>

{% schema %}
{
  "name": "t:sections.main-collection-banner.name",
  "class": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.main-collection-banner.settings.paragraph.content"
    },
    {
      "type": "checkbox",
      "id": "show_collection_description",
      "default": true,
      "label": "t:sections.main-collection-banner.settings.show_collection_description.label"
    },
    {
      "type": "checkbox",
      "id": "show_collection_image",
      "default": false,
      "label": "t:sections.main-collection-banner.settings.show_collection_image.label",
      "info": "t:sections.main-collection-banner.settings.show_collection_image.info"
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.all.colors.accent_1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.all.colors.accent_2.label"
        },
        {
          "value": "background-1",
          "label": "t:sections.all.colors.background_1.label"
        },
        {
          "value": "background-2",
          "label": "t:sections.all.colors.background_2.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.colors.inverse.label"
        }
      ],
      "default": "background-1",
      "label": "t:sections.all.colors.label"
    }
  ]
}
{% endschema %}